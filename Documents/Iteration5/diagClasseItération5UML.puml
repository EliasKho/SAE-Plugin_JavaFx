@startuml
skinparam class {
    BackgroundColor<<new>> LightYellow
    BackgroundColor<<update>> LightBlue
    BorderColor Black
    ArrowColor Black
}

class Dossier extends FileComposite {
    +Dossier(File)
    +getChildren(): List<FileComposite>
}

class Fichier extends FileComposite {
    +Fichier(File)
    +getChildren(): List<FileComposite>
}

abstract class FileComposite {
    +FileComposite(File)
    {abstract}+ getChildren(): List<FileComposite>
    +toString(): String
}

class VueArborescence <<update>> implements Observateur{
    -TreeView<FileComposite>: arborescence
    +VueArborescence(Modele,ControlerClic)
    +getArbre(FileComposite):TreeItem<FileComposite>
    +actualiser(Sujet):void
    +majTaille():void
}

class Attribut <<update>>{
    -nom: String
    -type: Type
    -modifier: int
    +Attribut(String,Type,int)
    +getUMLString():String
    +getString():String
    +getModifierUMLString():String
    +getModifierString():String
    +equals(Object):boolean
    +hashCode():int
    +getter/setter(): void
}

class Classe <<update>>{
    -nom: String
    -isInterface: boolean
    -isAbstract: boolean
    -nomPackage: String
    -x: double
    -y: double
    -longeur: double
    -largeur: double
    +ajouterMethode(Methode):void
    +getRealName():String
    +absolutePath: String
    +Classe(String)
    +equals(Object):boolean
    +hashCode():int
    +getter/setter(): void
}

class ClasseLoader <<new>>{
    -classes: HashMap<String,Class<?>> {static}
    +loadClass(String,File): String {static}
    +getClasses():HashMap<String,Class<?>>
}

class Methode <<update>>{
    -nom: String
    -typeRetour: Type
    -parametres: List<Parameter>
    -modifier: int
    -constructeur: boolean
    +Methode(String,Type,List<Parameter>,int)
    +Methode(String,List<Parameter>,int)
    +getUMLString():String
    +getString():String
    -getParametersString():String
    +equals(Object):boolean
    +hashCode():int
    +getter/setter(): void
}

class Parametre <<new>>{
    -type: String
    +Parametre(String)
    +getType():String
}

class Fleche <<update>>{
    +{static} IMPLEMENTS: String
    +{static} EXTENDS: String
    +{static} DEPENDANCE: String
    +{static} nbRelations: HashMap<String, Interger>
    -type: String
    -nom: String
    -parentCardinalite: String
    -enfantCardinalite: String
    -indexEnfantParent: int
    -p1: double[]
    -p2: double[]
    +Fleche(Classe,Classe,String)
    -calculerPosition()
    +{static} retirer1Relation(String):void
    +{static} reinitialiserNbRelations():void
    +getUMLString():String
    +equals(Object):boolean
    +hashCode():int
    +toString():String
    +getter/setter(): void
}

class VueClasse implements Observateur {
    +VueClasse(Modele)
    +actualiser(Sujet):void
    +actualiserRelation(Sujet):void
    +createArrow(Fleche):void
}

class ControlerClic <<update>>{
    -nomClasse: String
    -contexteMenu : ContexteMenu
    +ControlerClic(Modele)
    +handle(MouseEvent):void
    -getItemSource():MenuItem
    -itemAjouterClasse():MenuItem
    -itemAjouterMethode(String):MenuItem
    -itemAjouterAttribut(String):MenuItem
    +getModifier(String,boolean,boolean):int
    -itemAjouterRelation():MenuItem
    +getNomClasse():String
}

class ControlerDrag <<update>>{
    -x:double
    -y:double
    +ControlerDrag(Modele)
    +handle(MouseEvent):void
}

class ControlerVues <<new>>{
    +ControlerVues(Modele)
    +AfficerrVueUML(GridPane):void
    +afficherVueClasse(GridPane):void
}

class ControlerImage <<update>>{
    +ControlerImage(Modele)
    +captureImage(Scene,VueClasse):void
    +captureImageUML():void
}

class Modele <<update>> implements Sujet{
    -UML: String
    +Modele()
    +enregistrerObservateur(Observateur):void
    +notifierObservateur():void
    +supprimerObservateur(Observateur):void
    +ajouterClasse(String, x, y):void
    +ajouterListClasses(List<String>):void
    +typePrimitif(Class<?>):boolean
    +classeExiste(String):boolean
    +classeInDiagrarm(String):boolean
    +getAttributs(Class<?>):ArrayList<ArrayList<Attribut>>
    +getmETHODE(Class<?>):ArrayList<Methode>
    +ajouterRelation(String, String, String, String, String, String):void
    -{static}getMethode(Class<?>,Method,List<Parametre>):Methode
    +updateRelationAttributs(Classe):void
    +updateRelations():void
    +createUML():String
    +isInDiagram(String): boolean
    +methodes introspections()
    +supprimerClasse(String):void
    +viderClasse():void
    +saveToFile(String):void
    +loadFromFile(String):void
    +genererCodeSource():boolean
    +ajouterClasseInexistante(String,String,double,double,List<Attribut>,List<Methode>):void
    +checkRelations():void
    +ajouterMethode(String,String,String,String,int):void
    +ajouterConstructeur(String,String,int):void
    +ajouterAttribut(String,String,String,int):void
    -{static}getAttribut(Field,ParameterizedType):Attribut
    +{static}isVoirGetSet():boolean
    +setVoirGetSet(boolean):void
    +{static}isVoirFleches():boolean
    +setVoirFleches(boolean):void
    +{static}isVoirAttributsHerites():boolean
    +setVoirAttributsHerites(boolean):void
    +getters/setters()
}

interface Observateur {
    +{abstract} actualiser(Sujet):void
}

interface Sujet {
    +{abstract} notifierObservateur():void
    +{abstract} supprimerObservateur(Observateur):void
    +{abstract} enregistrerObservateur(Observateur):void
}

class VueUML implements Observateur{
    +VueUML(Modele)
    +actualiser(Sujet):void
}


Dossier "1" --> "*" FileComposite: -ss_dossiers

VueArborescence "1" -> "1" Modele : modele
VueArborescence "1" -> "1" ControlerClic : controler

Classe "1" --> "*" Attribut: -attributs
Classe "1" --> "*" Methode: -methodes

Methode "1" --> "1" Parametre: -parametres

Fleche "*" --> "1" Classe: -parent
Fleche "*" --> "1" Classe: -enfant

VueClasse "1" -> "1" Modele : modele

ControlerClic "1" --> "1" Modele : modele

ControlerDrag "1" --> "1" Modele : modele

ControlerVues "1" --> "1" Modele : modele

ControlerImage "1" --> "1" Modele : modele

VueUML "1" -> "1" Modele : modele

Modele "*" -> "1" Classe : -classes
Modele "*" -> "1" FileComposite : -racine
Modele "*" --> "*" Observateur : -observateurs
Modele "*" --> "*" Fleche : -fleches

@enduml